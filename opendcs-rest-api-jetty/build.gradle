plugins {
    id "opendcs-rest-api.java-conventions"
    id "opendcs-rest-api.deps-conventions"
    id "opendcs-rest-api.publishing-conventions"
}

dependencies {
    implementation(project(":opendcs-rest-api"))
    implementation(libs.jetty.server)
    implementation(libs.jetty.servlets)
    implementation(libs.jetty.servlet)
    implementation(libs.jersey.container.servlet)
    implementation(libs.postgresql)
    implementation(libs.swagger.jaxrs2)
    implementation(libs.javax.validation)
    implementation(libs.slf4j.jdk)
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.opendcs.odcsapi.jetty.Start',
                'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
        )
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = jar.archiveBaseName.get()
            from components.java
        }
    }
}

task startJetty(type: JavaExec) { ->
    classpath = sourceSets.test.runtimeClasspath
    mainClass = "org.opendcs.odcsapi.jetty.Start"
    jvmArgs("-DDCSTOOL_HOME=" + (project.findProperty("DCSTOOL_HOME") ?: "${project.buildDir}/opendcs/OPENDCS"),
            "-DDCSTOOL_USERDIR=" + (project.findProperty("DCSTOOL_USERDIR") ?: "${project.buildDir}/OPENDCS"))
    args(
            "-p", project.findProperty("REST_API_PORT") ?: "8081",
            "-c", project.findProperty("REST_API_CONTEXT") ?: "odcsapi",
            "-cors", project.findProperty("REST_API_CORS") ?: "${project.buildDir}/OPENDCS/opendcs_web_cors.cfg",
            "-s")
}

task createStartScript() {
    doLast {

        //Make bin directory if it does not exist already.  buildDir is now deprecated.
        File buildDir = project.layout.getBuildDirectory().get().getAsFile();
        File binDir = new File(buildDir.toString(), "bin");
        project.mkdir(binDir);

        //Make the start.sh file.
        new File(binDir, "start.sh").text = """
#!/bin/bash
cd `dirname \$0`/..
java  -Djava.util.logging.config.file=config/logging.properties \$JAVA_OPTS -jar libs/${project.name}-${project.version}.jar \$JAVA_ARGS
            """
    }
}

task bundle(type: Tar) {
    dependsOn jar
    dependsOn createStartScript

    compression Compression.GZIP
    archiveExtension = 'tar.gz'

    into('config') {
        from project.file("bin/logging.properties")
    }
    into('libs') {
        from configurations.runtimeClasspath
    }
    into('libs') {
        from jar
    }
    into('bin') {
        from new File(project.layout.getBuildDirectory().get().getAsFile(), "bin/start.sh");
    }
}
